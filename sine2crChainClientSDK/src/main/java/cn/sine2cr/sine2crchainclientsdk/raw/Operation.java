package cn.sine2cr.sine2crchainclientsdk.raw;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint64;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Operation extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b50612881806100206000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e0c320b1461007257806338266b22146100af57806350cb5493146100ec5780639ab4a98c14610129578063dc4536fd14610154575b600080fd5b34801561007e57600080fd5b5061009960048036036100949190810190610929565b61017d565b6040516100a69190610c2d565b60405180910390f35b3480156100bb57600080fd5b506100d660048036036100d1919081019061081c565b610231565b6040516100e39190610bf0565b60405180910390f35b3480156100f857600080fd5b50610113600480360361010e91908101906108ed565b6102db565b6040516101209190610c12565b60405180910390f35b34801561013557600080fd5b5061013e61038c565b60405161014b9190610c48565b60405180910390f35b34801561016057600080fd5b5061017b6004803603610176919081019061086e565b6103b8565b005b60008373ffffffffffffffffffffffffffffffffffffffff1663fbc5b5ed84846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016101d6929190610c7e565b602060405180830381600087803b1580156101f057600080fd5b505af1158015610204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102289190810190610845565b90509392505050565b60608173ffffffffffffffffffffffffffffffffffffffff16633bc5de306040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561029757600080fd5b505af11580156102ab573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506102d491908101906107b2565b9050919050565b60008273ffffffffffffffffffffffffffffffffffffffff166312a56588836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103329190610c63565b602060405180830381600087803b15801561034c57600080fd5b505af1158015610360573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061038491908101906107f3565b905092915050565b6000610396610446565b604051809103906000f0801580156103b2573d6000803e3d6000fd5b50905090565b8273ffffffffffffffffffffffffffffffffffffffff1663897bb32c83836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161040f929190610bb9565b600060405180830381600087803b15801561042957600080fd5b505af115801561043d573d6000803e3d6000fd5b50505050505050565b6040516118ef80610f5983390190565b600082601f830112151561046957600080fd5b815161047c61047782610cd4565b610ca7565b915081818352602084019350602081019050838560208402820111156104a157600080fd5b60005b838110156104d157816104b7888261063a565b8452602084019350602083019250506001810190506104a4565b5050505092915050565b600082601f83011215156104ee57600080fd5b81356105016104fc82610cfc565b610ca7565b9150818183526020840193506020810190508385602084028201111561052657600080fd5b60005b83811015610556578161053c8882610626565b845260208401935060208301925050600181019050610529565b5050505092915050565b600082601f830112151561057357600080fd5b815161058661058182610d24565b610ca7565b9150818183526020840193506020810190508360005b838110156105cc57815186016105b288826106fa565b84526020840193506020830192505060018101905061059c565b5050505092915050565b60006105e28251610e71565b905092915050565b60006105f68235610e83565b905092915050565b600061060a8251610e83565b905092915050565b600061061e8235610e95565b905092915050565b60006106328235610ea7565b905092915050565b60006106468251610ea7565b905092915050565b600082601f830112151561066157600080fd5b815161067461066f82610d4c565b610ca7565b9150808252602083016020830185838301111561069057600080fd5b61069b838284610f14565b50505092915050565b600082601f83011215156106b757600080fd5b81356106ca6106c582610d78565b610ca7565b915080825260208301602083018583830111156106e657600080fd5b6106f1838284610f05565b50505092915050565b60006060828403121561070c57600080fd5b6107166060610ca7565b9050600082015167ffffffffffffffff81111561073257600080fd5b61073e84828501610456565b60008301525060206107528482850161078a565b602083015250604082015167ffffffffffffffff81111561077257600080fd5b61077e8482850161064e565b60408301525092915050565b60006107968251610eb1565b905092915050565b60006107aa8235610ebb565b905092915050565b6000602082840312156107c457600080fd5b600082015167ffffffffffffffff8111156107de57600080fd5b6107ea84828501610560565b91505092915050565b60006020828403121561080557600080fd5b6000610813848285016105d6565b91505092915050565b60006020828403121561082e57600080fd5b600061083c848285016105ea565b91505092915050565b60006020828403121561085757600080fd5b6000610865848285016105fe565b91505092915050565b60008060006060848603121561088357600080fd5b6000610891868287016105ea565b935050602084013567ffffffffffffffff8111156108ae57600080fd5b6108ba868287016104db565b925050604084013567ffffffffffffffff8111156108d757600080fd5b6108e3868287016106a4565b9150509250925092565b6000806040838503121561090057600080fd5b600061090e85828601610612565b925050602061091f8582860161079e565b9150509250929050565b60008060006060848603121561093e57600080fd5b600061094c86828701610612565b935050602061095d8682870161079e565b925050604061096e8682870161079e565b9150509250925092565b600061098382610dd6565b80845260208401935061099583610db1565b60005b828110156109c7576109ab868351610ac9565b6109b482610e0f565b9150602086019550600181019050610998565b50849250505092915050565b60006109de82610dcb565b8084526020840193506109f083610da4565b60005b82811015610a2257610a06868351610ac9565b610a0f82610e02565b91506020860195506001810190506109f3565b50849250505092915050565b6000610a3982610de1565b80845260208401935083602082028501610a5285610dbe565b60005b84811015610a8b578383038852610a6d838351610b44565b9250610a7882610e1c565b9150602088019750600181019050610a55565b508196508694505050505092915050565b610aa581610ecf565b82525050565b610ab481610ee1565b82525050565b610ac381610ef3565b82525050565b610ad281610e49565b82525050565b6000610ae382610df7565b808452610af7816020860160208601610f14565b610b0081610f47565b602085010191505092915050565b6000610b1982610dec565b808452610b2d816020860160208601610f14565b610b3681610f47565b602085010191505092915050565b60006060830160008301518482036000860152610b6182826109d3565b9150506020830151610b766020860182610b9b565b5060408301518482036040860152610b8e8282610b0e565b9150508091505092915050565b610ba481610e53565b82525050565b610bb381610e5d565b82525050565b60006040820190508181036000830152610bd38185610978565b90508181036020830152610be78184610ad8565b90509392505050565b60006020820190508181036000830152610c0a8184610a2e565b905092915050565b6000602082019050610c276000830184610a9c565b92915050565b6000602082019050610c426000830184610aab565b92915050565b6000602082019050610c5d6000830184610aba565b92915050565b6000602082019050610c786000830184610baa565b92915050565b6000604082019050610c936000830185610baa565b610ca06020830184610baa565b9392505050565b6000604051905081810181811067ffffffffffffffff82111715610cca57600080fd5b8060405250919050565b600067ffffffffffffffff821115610ceb57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610d1357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610d3b57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610d6357600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115610d8f57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000610e7c82610e29565b9050919050565b6000610e8e82610e29565b9050919050565b6000610ea082610e29565b9050919050565b6000819050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000610eda82610e29565b9050919050565b6000610eec82610e29565b9050919050565b6000610efe82610e29565b9050919050565b82818337600083830152505050565b60005b83811015610f32578082015181840152602081019050610f17565b83811115610f41576000848401525b50505050565b6000601f19601f83011690509190505600608060405234801561001057600080fd5b506118cf806100206000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312a56588146100675780632d4ba84f146100de578063e8c6d5c314610169578063fbc5b5ed146101e0575b600080fd","","0000000000000000000000000000000000000000000000000000900463ffffffff1680633bc5de3014610051578063897bb32c1461007c575b600080fd5b34801561005d57600080fd5b506100666100a5565b6040516100739190610683565b60405180910390f35b34801561008857600080fd5b506100a3600480360361009e91908101906104a3565b610209565b005b60606001805480602002602001604051908101604052809291908181526020016000905b828210156102005783829060005260206000209060030201606060405190810160405290816000820180548060200260200160405190810160405280929190818152602001828054801561013c57602002820191906000526020600020905b815481526020019060010190808311610128575b5050505050815260200160018201548152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101e85780601f106101bd576101008083540402835291602001916101e8565b820191906000526020600020905b8154815290600101906020018083116101cb57829003601f168201915b505050505081525050815260200190600101906100c9565b50505050905090565b60016060604051908101604052808481526020014281526020018381525090806001815401808255809150509060018203906000526020600020906003020160009091929091909150600082015181600001908051906020019061026e92919061029d565b506020820151816001015560408201518160020190805190602001906102959291906102ea565b505050505050565b8280548282559060005260206000209081019282156102d9579160200282015b828111156102d85782518255916020019190600101906102bd565b5b5090506102e6919061036a565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061032b57805160ff1916838001178555610359565b82800160010185558215610359579182015b8281111561035857825182559160200191906001019061033d565b5b509050610366919061038f565b5090565b61038c91905b80821115610388576000816000905550600101610370565b5090565b90565b6103b191905b808211156103ad576000816000905550600101610395565b5090565b90565b600082601f83011215156103c757600080fd5b81356103da6103d5826106d2565b6106a5565b915081818352602084019350602081019050838560208402820111156103ff57600080fd5b60005b8381101561042f57816104158882610439565b845260208401935060208301925050600181019050610402565b5050505092915050565b6000610445823561078f565b905092915050565b600082601f830112151561046057600080fd5b813561047361046e826106fa565b6106a5565b9150808252602083016020830185838301111561048f57600080fd5b61049a838284610799565b50505092915050565b600080604083850312156104b657600080fd5b600083013567ffffffffffffffff8111156104d057600080fd5b6104dc858286016103b4565b925050602083013567ffffffffffffffff8111156104f957600080fd5b6105058582860161044d565b9150509250929050565b600061051a82610740565b80845260208401935061052c83610726565b60005b8281101561055e576105428683516105d8565b61054b82610761565b915060208601955060018101905061052f565b50849250505092915050565b60006105758261074b565b8084526020840193508360208202850161058e85610733565b60005b848110156105c75783830388526105a983835161061d565b92506105b48261076e565b9150602088019750600181019050610591565b508196508694505050505092915050565b6105e18161077b565b82525050565b60006105f282610756565b8084526106068160208601602086016107a8565b61060f816107db565b602085010191505092915050565b6000606083016000830151848203600086015261063a828261050f565b915050602083015161064f6020860182610674565b506040830151848203604086015261066782826105e7565b9150508091505092915050565b61067d81610785565b82525050565b6000602082019050818103600083015261069d818461056a565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156106c857600080fd5b8060405250919050565b600067ffffffffffffffff8211156106e957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561071157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000819050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156107c65780820151818401526020810190506107ab565b838111156107d5576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820e6713582b5d3ee7b1e22ead6213f3ea331d80408cd9acca468d4ce72bed4f3b26c6578706572696d656e74616cf50037a165627a7a72305820ccd8c2f3d38b182a568c69a4a8913b62e8e9dac95720b810619d3fff589a125e0029a165627a7a72305820350a6e660d7cfbaf3b22f746f305f1a3facd7820e64037c0b6f324cafac237990029a265627a7a7230582056b4f9538acf500cb9debc016cd5c21ca406d0e81d225a8e37ec245307ff38686c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"factory\",\"type\":\"address\"},{\"name\":\"datasGroup\",\"type\":\"uint64\"},{\"name\":\"datasId\",\"type\":\"uint64\"}],\"name\":\"createDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dataContract\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"components\":[{\"name\":\"data\",\"type\":\"int256[]\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"factory\",\"type\":\"address\"},{\"name\":\"datasGroup\",\"type\":\"uint64\"}],\"name\":\"createCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dataContract\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"int256[]\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"setData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_CREATEDATACONTRACT = "createDataContract";

    public static final String FUNC_GETDATA = "getData";

    public static final String FUNC_CREATECATEGORY = "createCategory";

    public static final String FUNC_CREATEFACTORY = "createFactory";

    public static final String FUNC_SETDATA = "setData";

    protected Operation(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt createDataContract(String factory, BigInteger datasGroup, BigInteger datasId) {
        final Function function = new Function(
                FUNC_CREATEDATACONTRACT,
                Arrays.<Type>asList(new Address(factory),
                new Uint64(datasGroup),
                new Uint64(datasId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createDataContract(String factory, BigInteger datasGroup, BigInteger datasId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEDATACONTRACT,
                Arrays.<Type>asList(new Address(factory),
                new Uint64(datasGroup),
                new Uint64(datasId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateDataContract(String factory, BigInteger datasGroup, BigInteger datasId) {
        final Function function = new Function(
                FUNC_CREATEDATACONTRACT,
                Arrays.<Type>asList(new Address(factory),
                new Uint64(datasGroup),
                new Uint64(datasId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getCreateDataContractInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEDATACONTRACT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<String> getCreateDataContractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEDATACONTRACT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public DynamicArray<Struct0> getData(String dataContract) throws ContractException {
        final Function function = new Function(FUNC_GETDATA,
                Arrays.<Type>asList(new Address(dataContract)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt createCategory(String factory, BigInteger datasGroup) {
        final Function function = new Function(
                FUNC_CREATECATEGORY,
                Arrays.<Type>asList(new Address(factory),
                new Uint64(datasGroup)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createCategory(String factory, BigInteger datasGroup, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATECATEGORY,
                Arrays.<Type>asList(new Address(factory),
                new Uint64(datasGroup)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateCategory(String factory, BigInteger datasGroup) {
        final Function function = new Function(
                FUNC_CREATECATEGORY,
                Arrays.<Type>asList(new Address(factory),
                new Uint64(datasGroup)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getCreateCategoryInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATECATEGORY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<String> getCreateCategoryOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATECATEGORY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt createFactory() {
        final Function function = new Function(
                FUNC_CREATEFACTORY,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createFactory(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEFACTORY,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateFactory() {
        final Function function = new Function(
                FUNC_CREATEFACTORY,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getCreateFactoryOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEFACTORY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setData(String dataContract, List<BigInteger> _data, String remark) {
        final Function function = new Function(
                FUNC_SETDATA,
                Arrays.<Type>asList(new Address(dataContract),
                new DynamicArray<Int256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(_data, Int256.class)),
                new Utf8String(remark)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setData(String dataContract, List<BigInteger> _data, String remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETDATA,
                Arrays.<Type>asList(new Address(dataContract),
                new DynamicArray<Int256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(_data, Int256.class)),
                new Utf8String(remark)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetData(String dataContract, List<BigInteger> _data, String remark) {
        final Function function = new Function(
                FUNC_SETDATA,
                Arrays.<Type>asList(new Address(dataContract),
                new DynamicArray<Int256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(_data, Int256.class)),
                new Utf8String(remark)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, List<BigInteger>, String> getSetDataInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETDATA,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, List<BigInteger>, String>(

                (String) results.get(0).getValue(),
                convertToNative((List<Int256>) results.get(1).getValue()),
                (String) results.get(2).getValue()
                );
    }

    public static Operation load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Operation(contractAddress, client, credential);
    }

    public static Operation deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Operation.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Struct0 extends DynamicStruct {
        public List<BigInteger> data;

        public BigInteger timestamp;

        public String remark;

        public Struct0(DynamicArray<Int256> data, Uint256 timestamp, Utf8String remark) {
            super(data,timestamp,remark);
            this.data = data.getNativeValue();
            this.timestamp = timestamp.getValue();
            this.remark = remark.getValue();
        }

        public Struct0(List<BigInteger> data, BigInteger timestamp, String remark) {
            super(new DynamicArray<Int256>(data.stream().map(obj -> new Int256(obj)).collect(java.util.stream.Collectors.toList())),new Uint256(timestamp),new Utf8String(remark));
            this.data = data;
            this.timestamp = timestamp;
            this.remark = remark;
        }
    }
}
